import customtkinter as ctk
from datetime import date


class ModernStatCard(ctk.CTkFrame):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    def __init__(self, master, title, value_text, icon="üìä", color="#3b82f6"):
        super().__init__(master, corner_radius=15)
        self.configure(fg_color=("white", "#1e293b"), border_width=2, border_color=(color, color))
        
        self.color = color
        self.target_value = 0
        self.current_value = 0
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        self.header_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.header_frame.pack(fill="x", padx=20, pady=(15, 5))
        
        # –ò–∫–æ–Ω–∫–∞
        self.icon_label = ctk.CTkLabel(
            self.header_frame,
            text=icon,
            font=ctk.CTkFont(size=32),
        )
        self.icon_label.pack(side="left")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.header_frame,
            text=title,
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="gray"
        )
        self.title_label.pack(side="left", padx=(10, 0))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        self.value_label = ctk.CTkLabel(
            self,
            text=value_text,
            font=ctk.CTkFont(size=42, weight="bold"),
            text_color=color
        )
        self.value_label.pack(pady=(10, 20), padx=20)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π)
        self.progress = ctk.CTkProgressBar(
            self,
            height=4,
            progress_color=color,
            fg_color=("#e5e7eb", "#374151")
        )
        self.progress.pack(fill="x", padx=20, pady=(0, 15))
        self.progress.set(0.7)  # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
        
        # Hover —ç—Ñ—Ñ–µ–∫—Ç
        self.bind("<Enter>", self.on_enter)
        self.bind("<Leave>", self.on_leave)
    
    def on_enter(self, event):
        self.configure(border_width=3)
    
    def on_leave(self, event):
        self.configure(border_width=2)
    
    def set_value(self, new_value, animate=True):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        self.target_value = int(new_value)
        if animate:
            self.animate_value()
        else:
            self.current_value = self.target_value
            self.value_label.configure(text=str(self.target_value))
    
    def animate_value(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è"""
        if self.current_value < self.target_value:
            self.current_value += max(1, (self.target_value - self.current_value) // 10)
            self.value_label.configure(text=str(self.current_value))
            self.after(50, self.animate_value)
        elif self.current_value > self.target_value:
            self.current_value -= max(1, (self.current_value - self.target_value) // 10)
            self.value_label.configure(text=str(self.current_value))
            self.after(50, self.animate_value)
        else:
            self.value_label.configure(text=str(self.target_value))


class QuickActionButton(ctk.CTkButton):
    """–ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    def __init__(self, master, text, icon, command, color="#3b82f6"):
        super().__init__(
            master,
            text=f"{icon}  {text}",
            command=command,
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=color,
            hover_color=self.darken_color(color),
            corner_radius=10
        )
    
    @staticmethod
    def darken_color(hex_color):
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        hex_color = hex_color.lstrip('#')
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        r = max(0, r - 30)
        g = max(0, g - 30)
        b = max(0, b - 30)
        return f'#{r:02x}{g:02x}{b:02x}'


class DashboardFrame(ctk.CTkFrame):
    def __init__(self, master, db):
        super().__init__(master, fg_color="transparent")
        self.db = db

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_columnconfigure((0, 1, 2, 3), weight=1)
        self.grid_rowconfigure(2, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        self.create_header()
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_stat_cards()
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.create_quick_actions()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.create_recent_activity()
        
        self.update_stats()
    
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.grid(row=0, column=0, columnspan=4, sticky="ew", pady=(0, 15))
        header_frame.grid_columnconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = self.get_greeting()
        welcome_label = ctk.CTkLabel(
            header_frame,
            text=greeting,
            font=ctk.CTkFont(size=26, weight="bold")
        )
        welcome_label.grid(row=0, column=0, sticky="w")
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = date.today()
        date_label = ctk.CTkLabel(
            header_frame,
            text=today.strftime("%d %B %Y"),
            font=ctk.CTkFont(size=13),
            text_color="gray"
        )
        date_label.grid(row=1, column=0, sticky="w", pady=(3, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = ctk.CTkButton(
            header_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.update_stats,
            width=110,
            height=38,
            fg_color="transparent",
            border_width=2,
            border_color=("#3b82f6", "#2563eb"),
            text_color=("#3b82f6", "#2563eb"),
            hover_color=("#e5e7eb", "#334155"),
            font=ctk.CTkFont(size=13)
        )
        refresh_btn.grid(row=0, column=1, rowspan=2, padx=10, sticky="e")
    
    def get_greeting(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
        from datetime import datetime
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            return "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
        elif 12 <= hour < 17:
            return "üå§Ô∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
        elif 17 <= hour < 22:
            return "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
        else:
            return "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
    
    def create_stat_cards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        self.free_card = ModernStatCard(
            self,
            "–°–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤",
            "0",
            icon="üü¢",
            color="#10b981"
        )
        self.free_card.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

        # –ó–∞–Ω—è—Ç—ã–µ –Ω–æ–º–µ—Ä–∞
        self.occupied_card = ModernStatCard(
            self,
            "–ó–∞–Ω—è—Ç–æ –Ω–æ–º–µ—Ä–æ–≤",
            "0",
            icon="üî¥",
            color="#ef4444"
        )
        self.occupied_card.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")
        
        # –ó–∞–µ–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è
        self.checkin_card = ModernStatCard(
            self,
            "–ó–∞–µ–∑–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
            "0",
            icon="üì•",
            color="#3b82f6"
        )
        self.checkin_card.grid(row=1, column=2, padx=10, pady=10, sticky="nsew")

        # –í—ã–µ–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è
        self.checkout_card = ModernStatCard(
            self,
            "–í—ã–µ–∑–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
            "0",
            icon="üì§",
            color="#f59e0b"
        )
        self.checkout_card.grid(row=1, column=3, padx=10, pady=10, sticky="nsew")
    
    def create_quick_actions(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_frame = ctk.CTkFrame(self, corner_radius=15)
        actions_frame.grid(row=2, column=0, columnspan=4, sticky="ew", padx=10, pady=10)
        
        ctk.CTkLabel(
            actions_frame,
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        buttons_frame = ctk.CTkFrame(actions_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(0, 15))
        buttons_frame.grid_columnconfigure((0, 1, 2, 3), weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        QuickActionButton(
            buttons_frame,
            "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "‚ûï",
            self.quick_new_booking,
            color="#3b82f6"
        ).grid(row=0, column=0, padx=5, sticky="ew")
        
        QuickActionButton(
            buttons_frame,
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
            "üè†",
            self.quick_add_room,
            color="#10b981"
        ).grid(row=0, column=1, padx=5, sticky="ew")
        
        QuickActionButton(
            buttons_frame,
            "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è",
            "üë§",
            self.quick_add_guest,
            color="#8b5cf6"
        ).grid(row=0, column=2, padx=5, sticky="ew")
        
        QuickActionButton(
            buttons_frame,
            "–û—Ç—á–µ—Ç—ã",
            "üìä",
            self.quick_reports,
            color="#f59e0b"
        ).grid(row=0, column=3, padx=5, sticky="ew")
    
    def create_recent_activity(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        activity_frame = ctk.CTkFrame(self, corner_radius=15)
        activity_frame.grid(row=3, column=0, columnspan=4, sticky="nsew", padx=10, pady=10)
        activity_frame.grid_rowconfigure(1, weight=1)
        
        ctk.CTkLabel(
            activity_frame,
            text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            font=ctk.CTkFont(size=18, weight="bold")
        ).grid(row=0, column=0, sticky="w", padx=20, pady=(15, 10))
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        self.activity_scroll = ctk.CTkScrollableFrame(
            activity_frame,
            fg_color="transparent"
        )
        self.activity_scroll.grid(row=1, column=0, sticky="nsew", padx=20, pady=(0, 15))
        
        self.load_recent_activities()
    
    def load_recent_activities(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        for widget in self.activity_scroll.winfo_children():
            widget.destroy()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ ID, —Ç–∞–∫ –∫–∞–∫ created_at –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
        try:
            self.db.cursor.execute("""
                SELECT b.id, r.number, g.full_name, b.check_in_date, b.status
                FROM bookings b
                JOIN rooms r ON b.room_id = r.id
                JOIN guests g ON b.guest_id = g.id
                ORDER BY b.id DESC
                LIMIT 5
            """)
            
            recent_bookings = self.db.cursor.fetchall()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")
            recent_bookings = []
        
        if not recent_bookings:
            ctk.CTkLabel(
                self.activity_scroll,
                text="–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
                text_color="gray",
                font=ctk.CTkFont(size=13)
            ).pack(pady=20)
            return
        
        for booking in recent_bookings:
            self.create_activity_item(booking)
    
    def create_activity_item(self, booking):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        booking_id, room_number, guest_name, check_in, status = booking
        
        item_frame = ctk.CTkFrame(
            self.activity_scroll,
            corner_radius=10,
            fg_color=("#f3f4f6", "#374151")
        )
        item_frame.pack(fill="x", pady=5)
        
        # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_icons = {
            "–ê–∫—Ç–∏–≤–Ω–æ": "‚úÖ",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "‚úîÔ∏è",
            "–û—Ç–º–µ–Ω–µ–Ω–æ": "‚ùå"
        }
        icon = status_icons.get(status, "üìã")
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–∫–æ–Ω–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        left_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
        left_frame.pack(side="left", fill="both", expand=True, padx=15, pady=10)
        
        ctk.CTkLabel(
            left_frame,
            text=icon,
            font=ctk.CTkFont(size=24)
        ).pack(side="left", padx=(0, 10))
        
        info_frame = ctk.CTkFrame(left_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="both", expand=True)
        
        ctk.CTkLabel(
            info_frame,
            text=f"–ë—Ä–æ–Ω—å #{booking_id} - –ù–æ–º–µ—Ä {room_number}",
            font=ctk.CTkFont(size=13, weight="bold"),
            anchor="w"
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            info_frame,
            text=f"–ì–æ—Å—Ç—å: {guest_name} | –ó–∞–µ–∑–¥: {check_in}",
            font=ctk.CTkFont(size=11),
            text_color="gray",
            anchor="w"
        ).pack(anchor="w")
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å
        status_colors = {
            "–ê–∫—Ç–∏–≤–Ω–æ": "#10b981",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "#6b7280",
            "–û—Ç–º–µ–Ω–µ–Ω–æ": "#ef4444"
        }
        
        ctk.CTkLabel(
            item_frame,
            text=status,
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color=status_colors.get(status, "gray"),
            width=100
        ).pack(side="right", padx=15)
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        stats = self.db.get_dashboard_stats()
        
        self.free_card.set_value(stats["free"], animate=True)
        self.occupied_card.set_value(stats["occupied"], animate=True)
        self.checkin_card.set_value(stats["check_ins"], animate=True)
        self.checkout_card.set_value(stats["check_outs"], animate=True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å)
        total_rooms = stats["free"] + stats["occupied"]
        if total_rooms > 0:
            occupancy_rate = stats["occupied"] / total_rooms
            self.free_card.progress.set(1 - occupancy_rate)
            self.occupied_card.progress.set(occupancy_rate)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.load_recent_activities()
    
    def quick_new_booking(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        from tkinter import messagebox
        messagebox.showinfo(
            "–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
            parent=self
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    
    def quick_add_room(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞"""
        from tkinter import messagebox
        messagebox.showinfo(
            "–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞...",
            parent=self
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –Ω–æ–º–µ—Ä–æ–≤
    
    def quick_add_guest(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—è"""
        from tkinter import messagebox
        messagebox.showinfo(
            "–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≥–æ—Å—Ç—è...",
            parent=self
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –≥–æ—Å—Ç–µ–π
    
    def quick_reports(self):
        """–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç—á–µ—Ç—ã"""
        from tkinter import messagebox
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        stats = self.db.get_dashboard_stats()
        total_rooms = stats["free"] + stats["occupied"]
        
        if total_rooms > 0:
            occupancy_rate = (stats["occupied"] / total_rooms) * 100
        else:
            occupancy_rate = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏ –±—Ä–æ–Ω–µ–π
        self.db.cursor.execute("SELECT COUNT(*) FROM guests")
        total_guests = self.db.cursor.fetchone()[0]
        
        self.db.cursor.execute("SELECT COUNT(*) FROM bookings WHERE status = ?", 
                              (self.db.BOOKING_STATUS_ACTIVE,))
        active_bookings = self.db.cursor.fetchone()[0]
        
        report = f"""
üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢
{'='*40}

üè® –ù–æ–º–µ—Ä–∞:
  ‚Ä¢ –í—Å–µ–≥–æ: {total_rooms}
  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {stats['free']}
  ‚Ä¢ –ó–∞–Ω—è—Ç–æ: {stats['occupied']}
  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {occupancy_rate:.1f}%

üìÖ –°–µ–≥–æ–¥–Ω—è:
  ‚Ä¢ –ó–∞–µ–∑–¥–æ–≤: {stats['check_ins']}
  ‚Ä¢ –í—ã–µ–∑–¥–æ–≤: {stats['check_outs']}

üë• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
  ‚Ä¢ –í—Å–µ–≥–æ –≥–æ—Å—Ç–µ–π: {total_guests}
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π: {active_bookings}
        """
        
        messagebox.showinfo("–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç", report.strip(), parent=self)