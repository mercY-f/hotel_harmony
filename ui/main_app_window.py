import customtkinter as ctk
from PIL import Image
import os

from .dashboard_frame import DashboardFrame
from .rooms_frame import RoomsFrame
from .bookings_frame import BookingsFrame
from .guests_frame import GuestsFrame


class ModernButton(ctk.CTkButton):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.default_fg_color = self.cget("fg_color")
        self.hover_fg_color = "#1f538d"
        self.active_fg_color = "#2b6cb0"
        
        self.bind("<Enter>", self.on_enter)
        self.bind("<Leave>", self.on_leave)
    
    def on_enter(self, event):
        if not self.cget("state") == "disabled":
            self.configure(fg_color=self.hover_fg_color)
    
    def on_leave(self, event):
        if not self.cget("state") == "disabled":
            self.configure(fg_color=self.default_fg_color)
    
    def set_active(self, active=True):
        if active:
            self.configure(fg_color=self.active_fg_color, font=ctk.CTkFont(size=14, weight="bold"))
        else:
            self.configure(fg_color=self.default_fg_color, font=ctk.CTkFont(size=14))


class MainAppWindow(ctk.CTk):
    def __init__(self, db):
        super().__init__()
        self.db = db

        self.title("Hotel Harmony - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–µ–ª–µ–º")
        self.geometry("1400x800")
        self.minsize(1024, 600)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.sidebar_expanded = True
        self.current_frame_name = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫
        self.load_icons()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_sidebar()
        self.create_top_bar()
        self.create_main_content()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.bind("<Configure>", self.on_window_resize)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.select_frame("dashboard")
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = 1400
        height = 800
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')
    
    def load_icons(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        icon_size = (24, 24)
        try:
            self.dashboard_icon = ctk.CTkImage(
                Image.open("assets/images/dashboard.png"), 
                size=icon_size
            )
            self.rooms_icon = ctk.CTkImage(
                Image.open("assets/images/rooms.png"), 
                size=icon_size
            )
            self.bookings_icon = ctk.CTkImage(
                Image.open("assets/images/bookings.png"), 
                size=icon_size
            )
            self.guests_icon = ctk.CTkImage(
                Image.open("assets/images/guest_icon.png"), 
                size=icon_size
            )
            self.menu_icon = ctk.CTkImage(
                Image.open("assets/images/menu.png") if os.path.exists("assets/images/menu.png") 
                else Image.new('RGB', (24, 24), color='white'), 
                size=icon_size
            )
        except FileNotFoundError:
            print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            self.dashboard_icon = None
            self.rooms_icon = None
            self.bookings_icon = None
            self.guests_icon = None
            self.menu_icon = None
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.sidebar = ctk.CTkFrame(self, width=280, corner_radius=0)
        self.sidebar.grid(row=0, column=0, rowspan=2, sticky="nsew")
        self.sidebar.grid_rowconfigure(6, weight=1)
        self.sidebar.grid_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logo_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.logo_frame.grid(row=0, column=0, padx=20, pady=(30, 20), sticky="ew")
        
        self.logo_label = ctk.CTkLabel(
            self.logo_frame,
            text="üè® Hotel Harmony",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=("#1f538d", "#3b82f6")
        )
        self.logo_label.pack()
        
        self.subtitle_label = ctk.CTkLabel(
            self.logo_frame,
            text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.subtitle_label.pack()
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ctk.CTkFrame(self.sidebar, height=2, fg_color=("#d1d5db", "#374151")).grid(
            row=1, column=0, padx=20, pady=(0, 20), sticky="ew"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_buttons = {}
        
        self.nav_buttons["dashboard"] = ModernButton(
            self.sidebar,
            text="  –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            image=self.dashboard_icon,
            compound="left",
            command=lambda: self.select_frame("dashboard"),
            height=50,
            anchor="w",
            fg_color="transparent",
            text_color=("gray10", "gray90"),
            hover_color=("#e5e7eb", "#374151")
        )
        self.nav_buttons["dashboard"].grid(row=2, column=0, padx=15, pady=5, sticky="ew")

        self.nav_buttons["rooms"] = ModernButton(
            self.sidebar,
            text="  –ù–æ–º–µ—Ä–∞",
            image=self.rooms_icon,
            compound="left",
            command=lambda: self.select_frame("rooms"),
            height=50,
            anchor="w",
            fg_color="transparent",
            text_color=("gray10", "gray90"),
            hover_color=("#e5e7eb", "#374151")
        )
        self.nav_buttons["rooms"].grid(row=3, column=0, padx=15, pady=5, sticky="ew")

        self.nav_buttons["bookings"] = ModernButton(
            self.sidebar,
            text="  –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            image=self.bookings_icon,
            compound="left",
            command=lambda: self.select_frame("bookings"),
            height=50,
            anchor="w",
            fg_color="transparent",
            text_color=("gray10", "gray90"),
            hover_color=("#e5e7eb", "#374151")
        )
        self.nav_buttons["bookings"].grid(row=4, column=0, padx=15, pady=5, sticky="ew")

        self.nav_buttons["guests"] = ModernButton(
            self.sidebar,
            text="  –ì–æ—Å—Ç–∏",
            image=self.guests_icon,
            compound="left",
            command=lambda: self.select_frame("guests"),
            height=50,
            anchor="w",
            fg_color="transparent",
            text_color=("gray10", "gray90"),
            hover_color=("#e5e7eb", "#374151")
        )
        self.nav_buttons["guests"].grid(row=5, column=0, padx=15, pady=5, sticky="ew")
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.settings_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.settings_frame.grid(row=7, column=0, padx=15, pady=20, sticky="ew")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.theme_label = ctk.CTkLabel(
            self.settings_frame,
            text="–¢–µ–º–∞:",
            font=ctk.CTkFont(size=12)
        )
        self.theme_label.pack(anchor="w", pady=(0, 5))
        
        self.theme_switch = ctk.CTkSegmentedButton(
            self.settings_frame,
            values=["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"],
            command=self.change_theme
        )
        self.theme_switch.set("–°–∏—Å—Ç–µ–º–Ω–∞—è")
        self.theme_switch.pack(fill="x")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        self.version_label = ctk.CTkLabel(
            self.settings_frame,
            text="–í–µ—Ä—Å–∏—è 2.0",
            font=ctk.CTkFont(size=10),
            text_color="gray"
        )
        self.version_label.pack(pady=(15, 0))
    
    def create_top_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        self.top_bar = ctk.CTkFrame(self, height=60, corner_radius=0)
        self.top_bar.grid(row=0, column=1, sticky="ew", padx=0, pady=0)
        self.top_bar.grid_columnconfigure(1, weight=1)
        self.top_bar.grid_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–µ–Ω—é
        self.toggle_btn = ctk.CTkButton(
            self.top_bar,
            text="‚ò∞",
            width=50,
            height=50,
            command=self.toggle_sidebar,
            fg_color="transparent",
            hover_color=("#e5e7eb", "#374151"),
            font=ctk.CTkFont(size=24)
        )
        self.toggle_btn.grid(row=0, column=0, padx=10, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page_title = ctk.CTkLabel(
            self.top_bar,
            text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.page_title.grid(row=0, column=1, padx=20, sticky="w")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_frame = ctk.CTkFrame(self.top_bar, fg_color="transparent")
        self.info_frame.grid(row=0, column=2, padx=20, sticky="e")
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        self.update_datetime()
    
    def update_datetime(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        from datetime import datetime
        now = datetime.now()
        date_str = now.strftime("%d.%m.%Y")
        time_str = now.strftime("%H:%M")
        
        if hasattr(self, 'datetime_label'):
            self.datetime_label.configure(text=f"üìÖ {date_str}  üïê {time_str}")
        else:
            self.datetime_label = ctk.CTkLabel(
                self.info_frame,
                text=f"üìÖ {date_str}  üïê {time_str}",
                font=ctk.CTkFont(size=13)
            )
            self.datetime_label.pack()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.after(60000, self.update_datetime)
    
    def create_main_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.content_frame.grid(row=1, column=1, sticky="nsew", padx=0, pady=0)
        self.content_frame.grid_rowconfigure(0, weight=1)
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        self.dashboard_frame = DashboardFrame(self.content_frame, self.db)
        self.rooms_frame = RoomsFrame(self.content_frame, self.db)
        self.bookings_frame = BookingsFrame(self.content_frame, self.db)
        self.guests_frame = GuestsFrame(self.content_frame, self.db)
    
    def toggle_sidebar(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        if self.sidebar_expanded:
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            self.sidebar.configure(width=80)
            self.logo_label.configure(text="üè®")
            self.subtitle_label.pack_forget()
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
            for btn in self.nav_buttons.values():
                btn.configure(text="")
            
            self.theme_label.pack_forget()
            self.theme_switch.pack_forget()
            self.version_label.pack_forget()
            
            self.sidebar_expanded = False
        else:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            self.sidebar.configure(width=280)
            self.logo_label.configure(text="üè® Hotel Harmony")
            self.subtitle_label.pack()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
            self.nav_buttons["dashboard"].configure(text="  –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            self.nav_buttons["rooms"].configure(text="  –ù–æ–º–µ—Ä–∞")
            self.nav_buttons["bookings"].configure(text="  –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.nav_buttons["guests"].configure(text="  –ì–æ—Å—Ç–∏")
            
            self.theme_label.pack(anchor="w", pady=(0, 5))
            self.theme_switch.pack(fill="x")
            self.version_label.pack(pady=(15, 0))
            
            self.sidebar_expanded = True
    
    def change_theme(self, value):
        """–°–º–µ–Ω–∞ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if value == "–°–≤–µ—Ç–ª–∞—è":
            ctk.set_appearance_mode("light")
        elif value == "–¢–µ–º–Ω–∞—è":
            ctk.set_appearance_mode("dark")
        else:
            ctk.set_appearance_mode("system")
    
    def select_frame(self, name):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        titles = {
            "dashboard": "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "rooms": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞–º–∏",
            "bookings": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            "guests": "–ë–∞–∑–∞ –≥–æ—Å—Ç–µ–π"
        }
        self.page_title.configure(text=titles.get(name, ""))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        for btn_name, btn in self.nav_buttons.items():
            if btn_name == name:
                btn.configure(
                    fg_color=("#3b82f6", "#2563eb"),
                    text_color="white"
                )
            else:
                btn.configure(
                    fg_color="transparent",
                    text_color=("gray10", "gray90")
                )
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
        self.dashboard_frame.grid_forget()
        self.rooms_frame.grid_forget()
        self.bookings_frame.grid_forget()
        self.guests_frame.grid_forget()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–µ–π–º
        if name == "dashboard":
            self.dashboard_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
            self.dashboard_frame.update_stats()
        elif name == "rooms":
            self.rooms_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
            self.rooms_frame.refresh_rooms_display()
        elif name == "bookings":
            self.bookings_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
            self.bookings_frame.refresh_bookings_table()
        elif name == "guests":
            self.guests_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
            self.guests_frame.refresh_guests_table()
        
        self.current_frame_name = name
    
    def on_window_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if event.widget == self:
            window_width = event.width
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ sidebar –ø—Ä–∏ —É–∑–∫–æ–º –æ–∫–Ω–µ
            if window_width < 1200 and self.sidebar_expanded:
                self.toggle_sidebar()
            elif window_width >= 1200 and not self.sidebar_expanded:
                self.toggle_sidebar()